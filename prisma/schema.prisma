// generator erd {
//   provider = "prisma-erd-generator"
//   includeRelationFromFields = true
//   theme = "forest"
// }

generator client {
  // Required
  provider = "prisma-client"
  output   = "../src/generated/prisma"

  // Optional
  runtime                = "nodejs"
  moduleFormat           = "esm"
  generatedFileExtension = "ts"
  importFileExtension    = "js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"] // Add rhel-openssl-3.0.x here
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DB_URL")
  // url      = "postgresql://xuannn:22030410@localhost:5431/flavornest-be-db?schema=public"
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  recipes   Recipe[]       // Recipes created by this user
  favorites FavoriteRecipe[]
  profile   Profile?
  userRecipeList     UserRecipeList[]
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Profile {
  id        String   @id @default(cuid())
  name      String?
  age       Int?
  gender    Gender?
  bio       String?
  avatarUrl String?
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Recipe {
  id           String          @id @default(cuid())
  title        String
  description  String?
  instructions RecipeInstruction[]
  ingredients  RecipeIngredient[]
  totalTime    Int?            // in minutes
  servings     Int?
  rating       Float           @default(0)
  ratingCount  Int             @default(0)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  // Relations
  authorId   String
  author     User              @relation(fields: [authorId], references: [id])
  categories RecipeCategory[]
  favorites  FavoriteRecipe[]
  userRecipeList      UserRecipeListItem[]
}

model RecipeInstruction {
  id        String   @id @default(cuid())
  step      Int
  description   String
  imageUrl String?
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([recipeId, step])
}

model Category {
  id           String            @id @default(cuid())
  name         String            @unique
  type         CategoryType
  description  String?
  recipes      RecipeCategory[]
}

enum CategoryType {
  CUISINE
  MEAL_TYPE
  DIETARY
  COOKING_METHOD
  MAIN_INGREDIENT
}

model RecipeCategory {
  recipeId   String
  categoryId String

  recipe   Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([recipeId, categoryId])
}

model RecipeIngredient {
  id          String                 @id @default(cuid())
  name        String
  quantity    Float
  unit        String

  recipeId  String

  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model FavoriteRecipe {
  userId   String
  recipeId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@id([userId, recipeId])
}

model UserRecipeList {
  id        String   @id @default(cuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipes UserRecipeListItem[]
}

model UserRecipeListItem {
  listId   String
  recipeId String

  list   UserRecipeList @relation(fields: [listId], references: [id], onDelete: Cascade)
  recipe Recipe         @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@id([listId, recipeId])
}